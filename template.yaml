AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template with EventBridge, Lambdas, S3 (KMS encrypted).

Globals:
  Function:
    Timeout: 60
    MemorySize: 256
    Runtime: python3.12

Resources:

  ## KMS Key
  AppKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS CMK for encrypting S3 objects"
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowRootAccount
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"

  ## S3 bucket with KMS encryption
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref AppKmsKey

  ## Lambda #1 (Triggered by EventBridge Rule #1)
  EventBridgeLambdaOne:
    Type: AWS::Serverless::Function
    DependsOn: InputBucket
    Properties:
      CodeUri: lambdas/lambda_one/
      Handler: app.lambda_handler
      Description: "Lambda triggered by EventBridge Rule #1"
      Environment:
        Variables:
          INPUT_BUCKET: !Ref InputBucket
          KMS_KEY_ID: !Ref AppKmsKey
      Policies:
        - S3WritePolicy:
            BucketName: !Ref InputBucket
        - Statement:
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !GetAtt AppKmsKey.Arn
      Events:
        ScheduleOne:
          Type: Schedule
          Properties:
            Schedule: cron(0 1 * * ? *)

  ## Lambda #2 (Triggered by EventBridge Rule #2)
  EventBridgeLambdaTwo:
    Type: AWS::Serverless::Function
    DependsOn: InputBucket
    Properties:
      CodeUri: lambdas/lambda_two/
      Handler: app.lambda_handler
      Description: "Lambda triggered by EventBridge Rule #2"
      Environment:
        Variables:
          INPUT_BUCKET: !Ref InputBucket
          KMS_KEY_ID: !Ref AppKmsKey
      Policies:
        - S3WritePolicy:
            BucketName: !Ref InputBucket
        - Statement:
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !GetAtt AppKmsKey.Arn
      Events:
        ScheduleTwo:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)
  
  ## DynamoDB for case/job metadata
  CaseMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: CaseId
          AttributeType: S
      KeySchema:
        - AttributeName: CaseId
          KeyType: HASH

  ## SNS Topic for Textract job completion
  TextractJobCompleteTopic:
    Type: AWS::SNS::Topic

  TextractStarterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/textract_starter/
      Handler: app.lambda_handler
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref CaseMetadataTable
          SNS_TOPIC_ARN: !Ref TextractJobCompleteTopic
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${InputBucket}
                - !Sub arn:aws:s3:::${InputBucket}/*
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt CaseMetadataTable.Arn
        - Statement:
            - Effect: Allow
              Action:
                - textract:StartDocumentTextDetection
                - textract:StartDocumentAnalysis
              Resource: "*"
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TextractJobCompleteTopic.TopicName
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref InputBucket
            Events: s3:ObjectCreated:*

    

Outputs:
  BucketName:
    Value: !Ref InputBucket
    Description: "KMS-encrypted S3 bucket for PDFs"
  KmsKeyId:
    Value: !GetAtt AppKmsKey.Arn
    Description: "KMS CMK used for encryption"
  DynamoTableName:
    Value: !Ref CaseMetadataTable
    Description: "DynamoDB table for case/job metadata"
  TextractSNSTopic:
    Value: !Ref TextractJobCompleteTopic
    Description: "SNS Topic for Textract completion"